[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool]

[tool.bandit]
exclude_dirs = ["tests"]
number = 4
recursive = true
targets = "src"

[tool.black]
line-length = 120

[tool.coverage.report]
fail_under = 100

[tool.coverage.run]
branch = true
source = ["src/chp_tools_remedy_rest_client_python"]

[tool.isort]
add_imports = ["from __future__ import annotations"]
balanced_wrapping = true
include_trailing_comma = true
line_length = 88
multi_line_output = 3
profile = "black"
py_version = 38
src_paths = ["src", "tests"]

[tool.poe.tasks]
bandit = "bandit -r src/chp_tools_remedy_rest_client_python"
black = "black src/chp_tools_remedy_rest_client_python tests scripts"
clean = """
# Multiline commands including comments work too. Unescaped whitespace is ignored.
rm -rf .coverage
       ./.venv
       ./htmlcov
       ./dist
       .pytest_cache
       ./**/__pycache__
       public
       unit-test-result.xml
"""
fail-if-tag-version-does-not-match-package = {"shell" = "python scripts/fail_if_tag_version_does_not_match_package.py"}
fail-if-version-is-already-published = {"shell" = "python scripts/fail_if_version_is_already_published.py"}
formatting = ["isort", "black"]
generate-docs = "pdoc 'src/chp_tools_remedy_rest_client_python' -o ./public"
isort = "isort src/chp_tools_remedy_rest_client_python tests scripts"
lint = ["formatting", "pre-commit", "static-analysis", "validate-version"]
pre-commit = "pre-commit run --all-files"
pylint = "pylint src/chp_tools_remedy_rest_client_python"
pyright = "pyright"
pytest = "coverage run --module pytest --junitxml=unit-test-result.xml --verbose 'tests/unit'"
pytest-coverage = "coverage report --show-missing"
serve-docs = "pdoc --docformat google 'src/chp_tools_remedy_rest_client_python'"
set-prerelease-version = {"shell" = "python scripts/set_prerelease_version.py"}
static-analysis = ["pylint", "bandit", "pyright"]
test = ["pytest", "pytest-coverage"]
validate-version = {"shell" = "python scripts/fail_if_version_is_not_formatted_correctly.py"}
verify = ["lint", "test"]

[tool.poetry]
authors = ["Cloud Infrastructure Services <DL-CloudInfrastructureServices@regence.com>"]
description = "Python client for Remedy ARS REST API"
documentation = "https://juno-app.gitpages.cambiahealth.com/chp-tools/chp-tools-remedy-rest-client-python/chp_tools_remedy_rest_client_python.html"
license = "Proprietary"
name = "chp-tools-remedy-rest-client-python"
packages = [{include = "chp_tools_remedy_rest_client_python", from = "src"}]
readme = "README.md"
repository = "https://git.cambiahealth.com/juno-app/chp-tools/chp-tools-remedy-rest-client-python/"
version = "0.1.3"

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.28.1"

[tool.poetry.group.development.dependencies]
poethepoet = "^0.24.0"

[tool.poetry.group.docs.dependencies]
pdoc = "^12.2.2"

[tool.poetry.group.lint.dependencies]
bandit = "^1.7.4"
black = "^22.10.0"
isort = "^5.10.1"
pylint = "^2.15.5"
pyright = "^1.1.282"

[tool.poetry.group.test.dependencies]
coverage = {extras = ["toml"], version = "^6.5.0"}
pytest = "^7.2.0"
responses = "^0.23.0"

[[tool.poetry.source]]
name = 'artifactory'
priority = 'default'
url = 'https://cambiahealth.jfrog.io/artifactory/api/pypi/pypi/simple'

[tool.pycln]
all = true
extend_exclude = "exports_test.py"

[tool.pylint]
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs = 0
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint."MESSAGES CONTROL"]
disable = "R1705,R0801,C0301"

[tool.pyright]
exclude = [
  "**/__pycache__"
]
executionEnvironments = [
  {root = "src"}
]
include = ["src", "tests/unit"]
pythonPlatform = "Linux"
pythonVersion = "3.8"
reportMissingImports = true
reportMissingTypeStubs = false
strict = ["src", "tests/unit"]
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = "-m 'not integration'"
junit_family = "xunit2"
markers = [
  "integration: marks as integration test",
  "slow: marks tests as slow",
  "unit: fast offline tests"
]
pythonpath = [
  "src"
]
testpaths = "tests"
